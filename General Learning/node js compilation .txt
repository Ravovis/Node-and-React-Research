-Describe Node.js exit codes
--------------------------------------------------------
Exit codes in Node.js are particular codes which help in finishing the processes. This may also include global objects. Some examples of exit code in Node.js are-

-   Internal JavaScript Evaluation Failure
-   Fatal Error
-   Internal Exception
-   Handler Run-time failure
-   Unused
-   Uncaught fatal exception



=======================================================
does node.js uses libuv to delegate async tasks to c++ so it could yous threading pool
---------------------------------------





======================================================

-how to check if file or directory exists
------------------------------------------

checks if file or directory exists

fs.existsSync(path)

or you can use

```javascript
await fs.promises.access("somefile");
```



========================================================

How can I uninstall npm modules in Node.js
------------------------------------------
The command is simply `npm uninstall <name>`





==================================================

How do Node.js works
-------------------------------
Node is completely event-driven. Basically the server consists of one thread processing one event after another.

A new request coming in is one kind of event. The server starts processing it and when there is a blocking IO operation, it does not wait until it completes and instead registers a callback function. The server then immediately starts to process another event (maybe another request). When the IO operation is finished, that is another kind of event, and the server will process it (i.e. continue working on the request) by executing the callback as soon as it has time.

So the server never needs to create additional threads or switch between threads, which means it has very little overhead. If you want to make full use of multiple hardware cores, you just start multiple instances of node.js

Node JS Platform does not follow Request/Response Multi-Threaded Stateless Model. It follows Single Threaded with Event Loop Model. Node JS Processing model mainly based on Javascript Event based model with Javascript callback mechanism.

**Single Threaded Event Loop Model Processing Steps:**

-   Clients Send request to Web Server.
-   Node JS Web Server internally maintains a Limited Thread pool to provide services to the Client Requests.
-   Node JS Web Server receives those requests and places them into a Queue. It is known as “Event Queue”.
-   Node JS Web Server internally has a Component, known as “Event Loop”. Why it got this name is that it uses indefinite loop to receive requests and process them.
-   Event Loop uses Single Thread only. It is main heart of Node JS Platform Processing Model.
-   Even Loop checks any Client Request is placed in Event Queue. If no, then wait for incoming requests for indefinitely.
-   If yes, then pick up one Client Request from Event Queue
    -   Starts process that Client Request
    -   If that Client Request Does Not requires any Blocking IO Operations, then process everything, prepare response and send it back to client.
    -   If that Client Request requires some Blocking IO Operations like interacting with Database, File System, External Services then it will follow different approach
        -   Checks Threads availability from Internal Thread Pool
        -   Picks up one Thread and assign this Client Request to that thread.
        -   That Thread is responsible for taking that request, process it, perform Blocking IO operations, prepare response and send it back to the Event Loop
        -   Event Loop in turn, sends that Response to the respective Client.





=========================================================




How does Node.js handle child threads
-------------------------------------------------
Node.js, in its essence, is a **single thread** process. It does not expose child threads and thread management methods to the developer. Technically, Node.js _does_ spawn child threads for certain tasks such as asynchronous I/O, but these run behind the scenes and do not execute any application JavaScript code, nor block the main event loop.

If threading support is desired in a Node.js application, there are tools available to enable it, such as the [ChildProcess](http://nodejs.org/api/child_process.html) module. In fact, [Node.js 12 has experimental support for threads](https://nodejs.org/docs/latest-v12.x/api/worker_threads.html).




====================================================


How many types of API functions are available in Node.js
----------------------------------------------------------
There are two types of API functions in Node.js:

-   Asynchronous, Non-blocking functions
-   Synchronous, Blocking functions
========================================================





js global and node.js global
-----------------------------------

Within a web browser such as Chrome, declaring the variable `i` outside of any function’s scope makes it global and therefore binds it as a property of the `window` object. As a result, running this code in a web browser requires repeatedly resolving the property `i` within the heavily populated `window` namespace in each iteration of the `for` loop.

In Node.js, however, declaring any variable outside of any function’s scope binds it only to the module’s own scope (not the `window` object) which therefore makes it much easier and faster to resolve.

It’s also worth noting that using `let` instead of `var` in the `for` loop declaration can reduce the loop’s run time by over 50%. But such a change assumes you know [the difference between `let` and `var`](https://www.toptal.com/javascript/interview-questions#question-527) and whether this will have an effect on the behavior of your specific loop.



=================================================


If Node.js is single threaded then how does it handle concurrency
---------------------------------------------------------------------

The main loop is single-threaded and all async calls are managed by libuv library.

For example:

```javascript
const crypto = require("crypto");
const start = Date.now();
function logHashTime() {
 crypto.pbkdf2("a", "b", 100000, 512, "sha512", () => {
console.log("Hash: ", Date.now() - start);
 });
}
logHashTime();
logHashTime();
logHashTime();
logHashTime();
```

This gives the output:

```javascript
Hash: 1213
Hash: 1225
Hash: 1212
Hash: 1222
```

This is because libuv sets up a thread pool to handle such concurrency. How many threads will be there in the thread pool depends upon the number of cores but you can override this.





====================================================



libuv helps node.js to do concurent execution
---------------------------------------------

==========================================================

module pattern in node js
---------------------------------

==================================================

package.json tide and caret

--------------------------------------------

-   `~version` **“Approximately equivalent to version”**, will update you to all future patch versions, without incrementing the minor version. `~1.2.3` will use releases from 1.2.3 to <1.3.0.
    
-   `^version` **“Compatible with version”**, will update you to all future minor/patch versions, without incrementing the major version. `^2.3.4` will use releases from 2.3.4 to <3.0.0.

===================================================

changing thread pool size

--------------------------------

process.env.UV_THREADPOOL_SIZE = 4 in node.js


====================================================

what is analogue to setTimeout(fn, 0) 

-----------------------------------------

setImmediate is equivalent to setTimeout(fn, 0) 

======================================================


The Node.js Event Loop, Timers, and process.nextTick()

------------------------------------------------
https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/

=====================================================


util.inspect() in node.js

-------------------------------

[[I_Nodejs detail]]

```javascript
const util = require('util')

console.log(util.inspect(myObject, {showHidden: false, depth: null}))

// alternative shortcut
console.log(util.inspect(myObject, false, null, true /* enable colors */))
```

Outputs

```javascript
{ a: 'a',  b: { c: 'c', d: { e: 'e', f: { g: 'g', h: { i: 'i' } } } } }
```


===========================================================

What are node.js buffers

-------------------------------------------

In general, buffers is a temporary memory that is mainly used by stream to hold on to some data until consumed. Buffers are introduced with additional use cases than JavaScript’s Unit8Array and are mainly used to represent a fixed-length sequence of bytes. This also supports legacy encodings like ASCII, utf-8, etc. It is a fixed(non-resizable) allocated memory outside the v8

============================================================


What are Promises in Node.js

--------------------------------

It allows to associate handlers to an asynchronous action's eventual success value or failure reason. This lets asynchronous methods return values like synchronous methods: instead of the final value, the asynchronous method returns a promise for the value at some point in the future.

Promises in node.js promised to do some work and then had separate callbacks that would be executed for success and failure as well as handling timeouts. Another way to think of promises in node.js was that they were emitters that could emit only two events: success and error.The cool thing about promises is you can combine them into dependency chains (do Promise C only when Promise A and Promise B complete).

The core idea behind promises is that a promise represents the result of an asynchronous operation. A promise is in one of three different states:

-   pending - The initial state of a promise.
-   fulfilled - The state of a promise representing a successful operation.
-   rejected - The state of a promise representing a failed operation. Once a promise is fulfilled or rejected, it is immutable (i.e. it can never change again).

**Creating a Promise**

```js
var myPromise = new Promise(function(resolve, reject){
   ....
})

```
=============================================================



What are some of the most popular packages of Node.js

-------------------------------------------------------------------

-   **Async**: Async is a utility module which provides straight-forward, powerful functions for working with asynchronous JavaScript.
-   **Browserify**: Browserify will recursively analyze all the require() calls in your app in order to build a bundle you can serve up to the browser in a single `<script>` tag.
-   **Bower**: Bower is a package manager for the web. It works by fetching and installing packages from all over, taking care of hunting, finding, downloading, and saving the stuff you’re looking for.
-   **Csv**: csv module has four sub modules which provides CSV generation, parsing, transformation and serialization for Node.js.
-   **Debug**: Debug is a tiny node.js debugging utility modelled after node core's debugging technique.
-   **Express**: Express is a fast, un-opinionated, minimalist web framework. It provides small, robust tooling for HTTP servers, making it a great solution for single page applications, web sites, hybrids, or public HTTP APIs.
-   **Grunt**: is a JavaScript Task Runner that facilitates creating new projects and makes performing repetitive but necessary tasks such as linting, unit testing, concatenating and minifying files (among other things) trivial.
-   **Gulp**: is a streaming build system that helps you automate painful or time-consuming tasks in your development workflow.
-   **Hapi**: is a streaming build system that helps you automate painful or time-consuming tasks in your development workflow.
-   **Http-server**: is a simple, zero-configuration command-line http server. It is powerful enough for production usage, but it's simple and hackable enough to be used for testing, local development, and learning.
-   **Inquirer**: A collection of common interactive command line user interfaces.
-   **Jquery**: jQuery is a fast, small, and feature-rich JavaScript library.
-   **Jshint**: Static analysis tool to detect errors and potential problems in JavaScript code and to enforce your team's coding conventions.
-   **Koa**: Koa is web app framework. It is an expressive HTTP middleware for node.js to make web applications and APIs more enjoyable to write.
-   **Lodash**: The lodash library exported as a node module. Lodash is a modern JavaScript utility library delivering modularity, performance, & extras.
-   **Less**: The less library exported as a node module.
-   **Moment**: A lightweight JavaScript date library for parsing, validating, manipulating, and formatting dates.
-   **Mongoose**: It is a MongoDB object modeling tool designed to work in an asynchronous environment.
-   **MongoDB**: The official MongoDB driver for Node.js. It provides a high-level API on top of mongodb-core that is meant for end users.
-   **Npm**: is package manager for javascript.
-   **Nodemon**: It is a simple monitor script for use during development of a node.js app, It will watch the files in the directory in which nodemon was started, and if any files change, nodemon will automatically restart your node application.
-   **Nodemailer**: This module enables e-mail sending from a Node.js applications.
-   **Optimist**: is a node.js library for option parsing with an argv hash.
-   **Phantomjs**: An NPM installer for PhantomJS, headless webkit with JS API. It has fast and native support for various web standards: DOM handling, CSS selector, JSON, Canvas, and SVG.
-   **Passport**: A simple, unobtrusive authentication middleware for Node.js. Passport uses the strategies to authenticate requests. Strategies can range from verifying username and password credentials or authentication using OAuth or OpenID.
-   **Q**: Q is a library for promises. A promise is an object that represents the return value or the thrown exception that the function may eventually provide.
-   **Request**: Request is Simplified HTTP request client make it possible to make http calls. It supports HTTPS and follows redirects by default.
-   **Socket.io**: Its a node.js realtime framework server.
-   **Sails**: Sails : API-driven framework for building realtime apps, using MVC conventions (based on Express and Socket.io)
-   **Through**: It enables simplified stream construction. It is easy way to create a stream that is both readable and writable.
-   **Underscore**: Underscore.js is a utility-belt library for JavaScript that provides support for the usual functional suspects (each, map, reduce, filter...) without extending any core JavaScript objects.
-   **Validator**: A nodejs module for a library of string validators and sanitizers.
-   **Winston**: A multi-transport async logging library for Node.js
-   **Ws**: A simple to use, blazing fast and thoroughly tested websocket client, server and console for node.js
-   **Xml2js**: A Simple XML to JavaScript object converter.
-   **Yo**: A CLI tool for running Yeoman generators
-   **Zmq**: Bindings for node.js and io.js to ZeroMQ .It is a high-performance asynchronous messaging library, aimed at use in distributed or concurrent applications.


==========================================================================

What are the data types in Node.js

-------------------------------------------

_Primitive Types_

-   String
    
-   Number
    
-   Boolean
    
-   Undefined
    
-   Null
    
-   RegExp
    
-   `Buffer`: Node.js includes an additional data type called Buffer (not available in browser's JavaScript). Buffer is mainly used to store binary data, while reading from a file or receiving packets over the network.



=============================================================================


What does the runtime environment mean in Node.js

------------------------------------------------------

The Node.js runtime is the software stack responsible for installing your web service's code and its dependencies and running your service.

The Node.js runtime for App Engine in the standard environment is declared in the `app.yaml` file:

runtime: nodejs10

The runtime environment is literally just the environment your application is running in. This can be used to describe both the hardware and the software that is running your application. How much RAM, what version of node, what operating system, how much CPU cores, can all be referenced when talking about a runtime environment.

================================================================================






What is a stub

---------------------

Stubbing and verification for node.js tests. Enables you to validate and override behaviour of nested pieces of code such as methods, require() and npm modules or even instances of classes. This library is inspired on node-gently, MockJS and mock-require.

**Features of Stub:**

-   Produces simple, lightweight Objects capable of extending down their tree
-   Compatible with Nodejs
-   Easily extendable directly or through an ExtensionManager
-   Comes with predefined, usable extensions

Stubs are functions/programs that simulate the behaviours of components/modules. Stubs provide canned answers to function calls made during test cases. Also, you can assert on with what these stubs were called.

A use-case can be a file read, when you do not want to read an actual file:

```js
var fs = require('fs');

var readFileStub = sinon.stub(fs, 'readFile', function (path, cb) {  
  return cb(null, 'filecontent');
});

expect(readFileStub).to.be.called;  
readFileStub.restore();
```


[[Sinon.js]]


========================================================================



What is callback hell in Node.js

----------------------------------

`Callback hell` is a phenomenon that afflicts a JavaScript developer when he tries to execute multiple asynchronous operations one after the other.

An asynchronous function is one where some external activity must complete before a result can be processed; it is “asynchronous” in the sense that there is an unpredictable amount of time before a result becomes available. Such functions require a callback function to handle errors and process the result.

```js
getData(function(a){
    getMoreData(a, function(b){
        getMoreData(b, function(c){ 
            getMoreData(c, function(d){ 
	            getMoreData(d, function(e){ 
		            ...
		        });
	        });
        });
    });
});
```

**Techniques for avoiding callback hell**

1.  Using Async.js
2.  Using Promises
3.  Using Async-Await

-   **Managing callbacks using Async.js**

`Async` is a really powerful npm module for managing asynchronous nature of JavaScript. Along with Node.js, it also works for JavaScript written for browsers.

Async provides lots of powerful utilities to work with asynchronous processes under different scenarios.

npm install --save async

-   **ASYNC WATERFALL**

```js
var async = require('async');
async.waterfall([
    function(callback) {
        //doSomething
        callback(null, paramx); //paramx will be availaible as the first parameter to the next function
        /**
 The 1st parameter passed in callback.
 @null or @undefined or @false control moves to the next function
 in the array
 if @true or @string the control is immedeatly moved
 to the final callback fucntion
 rest of the functions in the array
 would not be executed
 */
    },
    function(arg1, callback) {
        //doSomething else
      // arg1 now equals paramx
        callback(null, result);
    },
    function(arg1, callback) {
        //do More
        // arg1 now equals 'result'
        callback(null, 'done');
    },
    function(arg1, callback) {
        //even more
        // arg1 now equals 'done'
        callback(null, 'done');
    }
], function (err, result) {
    //final callback function
    //finally do something when all function are done.
    // result now equals 'done'
});
```

-   **ASYNC SERIES**

```js
var async = require('async');
async.series([
    function(callback){
        // do some stuff ...
        callback(null, 'one');
        /**
 The 1st parameter passed in callback.
 @null or @undefined or @false control moves to the next function
 in the array
 if @true or @string the control is immedeatly moved
 to the final callback fucntion with the value of err same as
 passed over here and
 rest of the functions in the array
 would not be executed
 */
    },
    function(callback){
        // do some more stuff ...
        callback(null, 'two');
    }
],
// optional callback
function(err, results){
    // results is now equal to ['one', 'two']
});
```

-   **Managing callbacks hell using promises**

Promises are alternative to callbacks while dealing with asynchronous code. Promises return the value of the result or an error exception. The core of the promises is the `.then()` function, which waits for the promise object to be returned. The `.then()` function takes two optional functions as arguments and depending on the state of the promise only one will ever be called. The first function is called when the promise if fulfilled (A successful result). The second function is called when the promise is rejected.

```js
var outputPromise = getInputPromise().then(function (input) {
    //handle success
}, function (error) {
    //handle error
});
```

-   **Using Async Await**

Async await makes asynchronous code look like it\’s synchronous. This has only been possible because of the reintroduction of promises into node.js. Async-Await only works with functions that return a promise.

```js
const getrandomnumber = function(){
    return new Promise((resolve, reject)=>{
        setTimeout(() => {
            resolve(Math.floor(Math.random() * 20));
        }, 1000);
    });
}

const addRandomNumber = async function(){
    const sum = await getrandomnumber() + await getrandomnumber();
    console.log(sum);
}

addRandomNumber();
```

=================================================================================


What is Node.js

----------------------------------

Node.js is an open-source server side runtime environment built on Chrome's V8 JavaScript engine. It provides an event driven, non-blocking (asynchronous) I/O and cross-platform runtime environment for building highly scalable server-side applications using JavaScript.

=====================================================================================


What is Node.js Process Model

-------------------------------

Node.js runs in a single process and the application code runs in a single thread and thereby needs less resources than other platforms. All the user requests to your web application will be handled by a single thread and all the I/O work or long running job is performed asynchronously for a particular request. So, this single thread doesn't have to wait for the request to complete and is free to handle the next request. When asynchronous I/O work completes then it processes the request further and sends the response.


======================================================================================

What is node.js streams

--------------------------

Streams are instances of EventEmitter which can be used to work with streaming data in Node.js. They can be used for handling and manipulating streaming large files(videos, mp3, etc) over the network. They use buffers as their temporary storage.  
  
There are mainly four types of the stream:

-   **Writable:** streams to which data can be written (for example, fs.createWriteStream()).
-   **Readable:** streams from which data can be read (for example, fs.createReadStream()).
-   **Duplex:** streams that are both Readable and Writable (for example, net.Socket).
-   **Transform:** Duplex streams that can modify or transform the data as it is written and read (for example, zlib.createDeflate()).

====================================================================================







What is the difference between Asynchronous and Non-blocking

------------------------------------------------------------

**1. Asynchronous**

The architecture of asynchronous explains that the message sent will not give the reply on immediate basis just like we send the mail but do not get the reply on an immediate basis. It does not have any dependency or order. Hence improving the system efficiency and performance. The server stores the information and when the action is done it will be notified.

**2. Non-Blocking**

Nonblocking immediately responses with whatever data available. Moreover, it does not block any execution and keeps on running as per the requests. If an answer could not be retrieved than in those cases API returns immediately with an error. Nonblocking is mostly used with I/O(input/output). Node.js is itself based on nonblocking I/O model. There are few ways of communication that a nonblocking I/O has completed. The callback function is to be called when the operation is completed. Nonblocking call uses the help of javascript which provides a callback function.

-   **Asynchronous VS Non-Blocking**

1.  Asynchronous does not respond immediately, While Nonblocking responds immediately if the data is available and if not that simply returns an error.
2.  Asynchronous improves the efficiency by doing the task fast as the response might come later, meanwhile, can do complete other tasks. Nonblocking does not block any execution and if the data is available it retrieves the information quickly.
3.  Asynchronous is the opposite of synchronous while nonblocking I/O is the opposite of blocking. They both are fairly similar but they are also different as asynchronous is used with a broader range of operations while nonblocking is mostly used with I/O.




=======================================================================================





What is the difference between process.exit() vs return when ending the process

------------------------------------------------------------------------------------

1.  Explicitly calling `process.exit` forcibly discards some pending asynchronous tasks.

> Calling process.exit() will force the process to exit as quickly as possible even if there are still asynchronous operations pending that have not yet completed fully, including I/O operations to process.stdout and process.stderr.

-- [https://nodejs.org/api/process.html#process_process_exit_code](https://nodejs.org/api/process.html#process_process_exit_code)

2.  `process.exit()` prevents the `beforeExit` event from emitting.

> The 'beforeExit' event is emitted when Node.js empties its event loop and has no additional work to schedule. Normally, the Node.js process will exit when there is no work scheduled, but a listener registered on the 'beforeExit' event can make asynchronous calls, and thereby cause the Node.js process to continue.

-- [https://nodejs.org/api/process.html#process_event_exit](https://nodejs.org/api/process.html#process_event_exit)


========================================================================================================



What is the preferred method of resolving unhandled exceptions in Node.js

------------------------------------------------------------------------------------

Unhandled exceptions in Node.js can be caught at the `Process` level by attaching a handler for `uncaughtException` event.

```js
process.on('uncaughtException', (err) => {
  console.log(`Caught exception: ${err}`);
});
```

However, `uncaughtException` is a very crude mechanism for exception handling and may be removed from Node.js in the future. An exception that has bubbled all the way up to the `Process` level means that your application, and Node.js may be in an undefined state, and the only sensible approach would be to restart everything.

//The preferred way is to add another layer between your application and the Node.js //process which is called the [domain](http://nodejs.org/api/domain.html). (depricated)

Domains provide a way to handle multiple different I/O operations as a single group. So, by having your application, or part of it, running in a separate domain, you can safely handle exceptions at the domain level, before they reach the `Process` level.

However, domains have been [pending deprecation](https://nodejs.org/api/domain.html) for a few years—since Node.js 4. It’s _possible_ a more future-proof approach would be to use [zones](https://github.com/angular/zone.js).


=============================================================================================



What is typically the first argument passed to a Node.js callback handler

---------------------------------------------------------------------------

Node.js core modules, as well as most of the community-published ones, follow a pattern whereby the first argument to any callback handler is an optional error object. If there is no error, the argument will be null or undefined.

A typical callback handler could therefore perform error handling as follows:

```js
function callback(err, results) {
    // usually we'll check for the error before handling results
    if(err) {
        // handle error somehow and return
    }
    // no error, perform standard callback handling
}
```

=====================================================================





When should you npm and when yarn

--------------------------------------

-   **npm**

It is the default method for managing packages in the Node.js runtime environment. It relies upon a command line client and a database made up of public and premium packages known as the the [[npm registry]]. Users can access the registry via the client and browse the many packages available through the npm website. Both npm and its registry are managed by npm, Inc.

node -v
npm -v

-   **Yarn**

Yarn was developed by Facebook in attempt to resolve some of npm’s shortcomings. Yarn isn’t technically a replacement for npm since it relies on modules from the npm registry. Think of Yarn as a new installer that still relies upon the same npm structure. The registry itself hasn’t changed, but the installation method is different. Since Yarn gives you access to the same packages as npm, moving from npm to Yarn doesn’t require you to make any changes to your workflow.

npm install yarn --global

**Comparing Yarn vs npm**

-   Fast: Yarn caches every package it downloads so it never needs to again. It also parallelizes operations to maximize resource utilization so install times are faster than ever.
-   Reliable: Using a detailed, but concise, lockfile format, and a deterministic algorithm for installs, Yarn is able to guarantee that an install that worked on one system will work exactly the same way on any other system.
-   Secure: Yarn uses checksums to verify the integrity of every installed package before its code is executed.
-   Offline Mode: If you've installed a package before, you can install it again without any internet connection.
-   Deterministic: The same dependencies will be installed the same exact way across every machine regardless of install order.
-   Network Performance: Yarn efficiently queues up requests and avoids request waterfalls in order to maximize network utilization.
-   Multiple Registries: Install any package from either npm or Bower and keep your package workflow the same.
-   Network Resilience: A single request failing won't cause an install to fail. Requests are retried upon failure.
-   Flat Mode: Resolve mismatching versions of dependencies to a single version to avoid creating duplicates.


====================================================

Why is Node.js single-threaded

--------------------------------------------

Node.js was created explicitly as an experiment in async processing. This was to try a new theory of doing async processing on a single thread over the existing thread-based implementation of scaling via different frameworks.





==================================================================================











p.s. part of my old notes

-------------------------------------------

#computerScience #jsFramework 

chalk - color of text

require

npm

поток всего 1?
Но асинхронность есть

eventLoop?

in callback in node firrst parameter should be err

throw (in js)

fs.readfile returns buffer

Buffer.from (content: ).toString();



readfile with utf-8 returns string

EventEmitter

emitter.on(string, arrow)
emitter.emit(string, params[])

http module
server = http.createServer(callback (req, res))
server.listen(port, callback)   (callback:server has been started)

req.url - куда было отправлено запрос
/ корень
site.com/contact = /contact

if else / switch - return different pages

or with parsing name with tree directory in your project with same names

process.env.PORT ||  3000




router.route('/adress').get((request, responce)= > {} )







Express - node framework to create server
express uses http under the hood

const app = express

```javascript
app.get('/', (req, res) => {
  res.send('Hi!')
})

app.listen(3000, () => console.log('Server ready'))
```


REPL mode

foreach
```javascript
apples.forEach(fruit => {
  console.count(fruit)
})
```

print callstack
```javascript
console.trace()
```

```javascript
const inquirer = require('inquirer')

var questions = [
  {
    type: 'input',
    name: 'name',
    message: "What's your name?"
  }
]

inquirer.prompt(questions).then(answers => {
  console.log(`Hi ${answers['name']}!`)
})
```

Event Loop
https://nodejs.dev/learn/the-nodejs-event-loop

Message Queue

first run everything in call stack and only then in message queue


ecma script 2015 - introduced promises - it is to run async as soon as possible, not at the end of the stack

process.nextTick()

```javascript
setImmediate(() => {
  //run something
})
```

```javascript
setTimeout(() => {
  // runs after 2 seconds
}, 2000)

setTimeout(() => {
  // runs after 50 milliseconds
}, 50)
```

```javascript
const id = setTimeout(() => {
  // should run after 2 seconds
}, 2000)

// I changed my mind
clearTimeout(id)
```

```javascript
setTimeout(() => {
  console.log('after ')
}, 0)

console.log(' before ')
```

```javascript
setInterval(() => {
  // runs every 2 seconds
}, 2000)
```




callbacks
callback hell

promises
async await

async await uses promises under the hood

pending state stearted by starting promises

Promisifying

Chaining promises

```javascript
const f1 = fetch('/something.json')
const f2 = fetch('/something2.json')

Promise.all([f1, f2])
  .then(res => {
    console.log('Array of results', res)
  })
  .catch(err => {
    console.error(err)
  })
```

 `Promise.race()`

Event Emitter

axios

Express

Buffer(for binaries. browser usually work with strings instead)

[`Buffer.from()`](https://nodejs.org/api/buffer.html#buffer_buffer_from_buffer_alloc_and_buffer_allocunsafe), [`Buffer.alloc()`](https://nodejs.org/api/buffer.html#buffer_class_method_buffer_alloc_size_fill_encoding), and [`Buffer.allocUnsafe()`](https://nodejs.org/api/buffer.html#buffer_class_method_buffer_allocunsafe_size)



streams

log whole object
```javascript
console.log(JSON.stringify(obj, null, 2))
```

```javascript
require('util').inspect.defaultOptions.depth = null
console.log(obj)
```

```bash
npm i -D typescript
```

```bash
tsc example.ts
```

for auth: express-openid-connect package


dotenv package

Auth0

JWT Authentification

for jwt: jsonwebtoken

nodemon - for automatic update on server change

openid

openid, oauth, jwt

REST Client extenstion for VS Code to do REST calls from VS Code

require('crypto').randomBytes(64).toString('hex')

require('dotenv').config()





============================================================







p.p.s. for js little training
------------------------------------
https://github.com/lydiahallie/javascript-questions