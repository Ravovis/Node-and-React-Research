В чем разница между AngularJS и Angular?
Что появилось в Angular:
Angular ориентирован на мобильные платформы и имеет лучшую производительность
Angular имеет встроенные сервисы для поддержки интернационализации
AngularJS проще настроить, чем Angular
AngularJS использует контроллеры и $scope
Angular имеет много способов определения локальных переменных
В Angular новый синтаксис структурных директив (camelCase)
Angular работает напрямую с свойствами и событиями DOM элементов
Одностороннее связывание данных через [property]
Двустороннее связывание данных через [(property)]
Новый механизм DI, роутинга, запуска приложения
Основные преимущества Angular:
Обратная совместимость Angular 2, 4, 5, ..
TypeScript с улучшенной проверкой типов
Встроенный компилятор с режимами JIT и AOT (+сокращение кода)
Встроенные анимации
 
Что такое MVVM и в чем разница перед MVC?
MVVM - шаблон проектирования архитектуры приложения. Состоит из 3 ключевых блоков: Model, View, ViewModel.
Отличие от MVС заключаются в:

View реагирует на действия пользователя и передает их во View Model через Data Binding.
View Model, в отличие от контроллера в MVC, имеет особый механизм, автоматизирующий связь между View и связанными свойствами в ViewModel.
 
Привязка данных между View и ViewModel может быть односторонней или двусторонней (one-way, two-way data-binding).
 
Что такое директива, компонент, модуль, сервис, пайп в Angular и для чего они нужны?

Директивы бывают трех видов: компонент, структурные и атрибутные
Компонент контролирует участок экрана, т.н. view.
Сервис это класс с узкой, четко определенной целью. Это может быть значение, функция, запрос, etc. Главное в них то, что они повторно используются, отделяя чистую функциональность компонента.
Пайп преобразует отображение значений в шаблоне, к примеру отображение дат в разных локалях или изменяют в отображении регистр строк.
 
Какие есть способы привязки данных в Angular
строковая интерполяция
привязка свойств 
привязка событий 
двусторонняя привязка
 
Как происходит взаимодействие компонентов в Angular
Способы взаимодействия
@Input()/@Output() декораторы свойств
@ViewChild() директива - получение доступа к свойствам дочернего компонента. 
Через сервис - передача данных между компонентами через единый сервис.
 
Основное отличие constructor от ngOnInit?
Конструктор сам по себе является фичей самого класса, а не Angular. Основная разница в том, что Angular запустит ngOnInit, после того, как закончит настройку компонента, то есть, это сигнал, благодаря которому свойства @Input() и другие байндинги, и декорируемые свойства доступны в ngOnInit, но не определены внутри конструктора, по дизайну.	
 
Каков жизненный цикл у компонентов?

ngOnChanges() - вызывается когда Angular переприсваивает привязанные данные к input properties. Метод получает объект SimpleChanges, со старыми и новыми значениями. Вызывается перед NgOnInit и каждый раз, когда изменяется одно или несколько связанных свойств.
ngOnInit() - инициализирует директиву/компонент после того, как Angular впервые отобразит связанные свойства и устанавливает входящие параметры.
ngDoCheck() - при обнаружении изменений, которые Angular не может самостоятельно обнаружить, реагирует на них.
ngAfterContentInit() - вызывается после того, как Angular спроецирует внешний контент в отображение компонента или отображение с директивой. Вызывается единожды, после первого ngDoCheck().
ngAfterContentChecked() - реагирует на проверку Angular-ом проецируемого содержимого. Вызывается после ngAfterContentInit() и каждый последующий ngDoCheck().
ngAfterViewInit() - вызывается после инициализации отображения компонента и дочерних/директив. Вызывается единожды, после первого ngAfterContentChecked().
ngAfterViewChecked() - реагирует на проверку отображения компонента и дочерних/директив. Вызывается после ngAfterViewInit() и каждый последующий ngAfterContentChecked().
ngOnDestroy() - после уничтожения директивы/компонента выполняется очистка. Отписывает Observables и отключает обработчики событий, чтобы избежать утечек памяти.
 
Что такое Shadow DOM и как с ним работать в Angular?
Shadow DOM (или теневая модель документа) — часть документа, реализующая инкапсуляцию в DOM дереве. Она (теневая модель) является частью документа и встраивается непосредственно внутрь страницы.
@Component({...
  encapsulation: ViewEncapsulation.Emulated / None /ShadowDom
)}
 
Что такое EventEmitter и как подписываться на события?
Используется в директивах и компонентах для подписки на пользовательские ивенты синхронно или асинхронно, и регистрации обработчиков для этих ивентов.
 
Что такое Change Detection, как работает Change Detection Mechanism?
Change Detection - процесс синхронизации модели с представлением. В Angular поток информации однонаправленный, даже при использовании ngModel для реализации двустороннего связывания, которая является синтаксическим сахаром поверх однонаправленного потока.
Change Detection Mechanism - продвигается только вперед и никогда не оглядывается назад, начиная с корневого (рут) компонента до последнего. В этом и есть смысл одностороннего потока данных. Архитектура Angular приложения очень проста — дерево компонентов. Каждый компонент указывает на дочерний, но дочерний не указывает на родительский. Односторонний поток устраняет необходимость $digest цикла.
 
Какие существуют стратегии обнаружения изменений?
Всего есть две стратегии - Default и OnPush. Если все компоненты используют первую стратегию, то Zone проверяет все дерево независимо от того, где произошло изменение. Чтобы сообщить Angular, что мы будем соблюдать условия повышения производительности нужно использовать стратегию обнаружения изменений OnPush. Это сообщит Angular, что наш компонент зависит только от входных данных и любой объект, который передается ему должен считаться immutable. Это все построено на принципе автомата Мили, где текущее состояние зависит только от входных значений.
 
В чём разница между Observable и Promise?
Promise обрабатывает одно значение по завершению асинхронной операции, вне зависимости от ее исхода, и не поддерживают отмену операции.
Observable же является потоком, и позволяет передавать как ноль, так и несколько событий, когда callback вызывается для каждого события.
 
В чем разница между Subject, BehaviorSubject, ReplaySubject, AsyncSubject?
Subject - специальные Observable.не хранит свои предыдущие состояния, зритель получает информацию только тогда, когда Subject сгенерирует новое событие, используя метод .next().
 BehaviorSubject - при подписке поведенческий Subject уведомляет своего зрителя о последнем произошедшем в нём событии или, если в Subject-е не происходило событий, создаёт для зрителя событие с изначальной информацией, которая передаётся при создании Subject-а.
ReplaySubject - при подписке повторяющийся Subject уведомляет своего нового зрителя о всех произошедшем в нём событиях с момента создания. Для оптимизации при создании повторяющегося Subject-а можно передать число последних событий, которые будут повторяться для каждого нового зрителя. Стоит отметить, что создание ReplaySubject-а c числом повторяющихся событий равное 1 эквивалетно созданию BehaviorSubject-а.
AsyncSubject - асинхронный Subject уведомляет своих зрителей только о последнем произошедшем событии и только когда Subject успешно завершается. Если AsyncSubject завершится ошибкой, его зрители будут уведомлены только об ошибке.
 
Что такое Interceptors
Позволяет нам создавать классы Interceptor которые имплементируются от интерфейса HttpInterceptor и позволяют нам перехватывать любые асинхронные запросы которые уходять в приложение. И благодоря методу intercept() мы можем взаемодействовать с этим механизмом перехвата и внедрять свою логику.
 
Что такое Dependency Injection?
Это важный паттерн шаблон проектирования приложений. В Angular внедрение зависимостей реализовано из-под капота.
Зависимости - это сервисы или объекты, которые нужны классу для выполнения своих функций. DI -позволяет запрашивать зависимости от внешних источников.
 
Каков жизненный цикл у Angular Router?
NavigationStart - начало навигации. 
RoutesRecognized - cопоставление URL-адресов и редиректы. 
GuardsCheckStart, GuardsCheckEnd - функции, которые использует роутер для определения может ли он выполнить навигацию. 
ResolveStart, ResolveEnd - функции, которые мы можем использовать для подгрузки данных во время навигации. 
ActivationStart, ActivationEnd, ChildActivationStart, ChildActivationEnd - события, во время которых активируются компоненты и отображаются их с помощью
Updating the URL - последний шаг в навигационном цикле — это обновление URL-адреса в address bar
 
 Что такое JIT и AOT, в чем их отличия и каковы сферы применения?
Angular приложение можно скомпилировать с помощью команд ng serve и ng build. При этом, можно работать с разными видами компиляции:
JIT - (Just-In-Time compilation) - компиляция "на лету", динамическая компиляция. В Angular используется по умолчанию.
AOT - (Ahead-Of-Time compilation) - компиляции перед исполнением.
 
